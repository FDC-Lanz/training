<?php

class MessagesController extends AppController {
	public $components = array('Paginator');
	public $limit      = 10;

	public function messageList() {
		$this->moreMessageList();
		$messages = $this->paginate('Message');
		$this->set(compact('messages'));
	}

	public function newMessage() {
		if ($this->request->is('post')) {
			$this->request->data['Message']['from_id'] = $this->Auth->user('id');
			if ($this->Message->save($this->request->data)) {
				$this->redirect(array('action' => 'messageList'));
			}
		}
	}

	public function moreMessageList($count = 0) {
		$userID = $this->Auth->user('id');

		$this->paginate = array('Message' => array(
				'conditions'                    => array(
					"Message.id IN
                (SELECT max(id)
                    FROM messages
                    WHERE
                        (Message.from_id = {$userID}) ||
                        (Message.to_id = {$userID})
                    GROUP BY
                        IF (from_id = {$userID}, to_id, from_id),
                        IF (from_id != {$userID}, to_id, from_id))"
				),
				'order'  => 'created DESC',
				'limit'  => $this->limit,
				'offset' => $count,
			));

		if ($this->request->is('ajax')) {
			$messages     = $this->paginate('Message');
			$this->layout = false;
			$this->set(compact('messages'));
		}
	}

	public function bulkDeleteMessage() {
		$me    = $this->Auth->user('id');
		$other = $this->request->data['id'];
		$this->Message->deleteAll(
			array(
				"Message.id IN
                (SELECT id FROM messages
                WHERE
                    (Message.from_id = {$me} && Message.to_id = {$other}) ||
                    (Message.from_id = {$other} && Message.to_id = {$me}))"
			)
		);
		exit;
	}

	public function messageDetails($other, $count = 0) {
		$me = $this->Auth->user('id');

		$this->loadModel('User');
		$this->User->id = $other;
		$user           = $this->User->read('id');

		$this->moreMessageDetails($other, $count);

		$messages = $this->paginate('Message');
		$this->set(compact('user', 'messages'));
	}

	public function moreMessageDetails($other, $count = 0) {
		$me = $this->Auth->user('id');

		if ($count == 1) {
			$limit = 1;
			$count = 0;
		}

		$this->paginate = array('Message' => array(
				'conditions'                    => array(
					"Message.id IN
                (SELECT id FROM messages
                WHERE
                    (Message.from_id = {$me} && Message.to_id = {$other}) ||
                    (Message.from_id = {$other} && Message.to_id = {$me}))"
				),
				'order'  => 'created DESC',
				'limit'  => $this->limit,
				'offset' => $count,
			));

		if ($this->request->is(['ajax'])) {
			$messages     = $this->paginate('Message');
			$this->layout = false;
			$this->set(compact('messages'));
		}
	}

	public function replyMessage() {
		$me = $this->Auth->user('id');
		if ($this->request->is('post')) {
			$other                                     = $this->request->data['Message']['to_id'];
			$this->request->data['Message']['from_id'] = $me;

			if ($this->Message->save($this->request->data)) {
				$this->paginate = array('Message' => array(
						'conditions'                    => array(
							"Message.id IN
                        (SELECT id FROM messages
                        WHERE
                            (Message.from_id = {$me} && Message.to_id = {$other}) ||
                            (Message.from_id = {$other} && Message.to_id = {$me}))"
						),
						'order'  => 'created DESC',
						'limit'  => 1,
						'offset' => 0,
					));

				$messages     = $this->paginate('Message');
				$this->layout = false;
				$this->set(compact('messages'));
			}
		}
	}

	public function singleDeleteMessage() {
		$this->Message->delete($this->request->data['id']);
		exit;
	}
}
